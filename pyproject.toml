# PEP 621 compliant file for project metadata
# See here for more information:
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#declaring-project-metadata
# https://www.python.org/dev/peps/pep-0621/
# https://setuptools.pypa.io/en/latest/index.html

[build-system]
requires = ["setuptools", "setuptools_scm[toml]"]
build-backend = "setuptools.build_meta"

[project]
name = "ruru"
description = "A collection of Python utilities ported from the R ecosystem."
authors = [
  { name = "Tonkin & Taylor Limited", email = "Sub-DisciplineData+AnalyticsStaff@tonkintaylor.co.nz" },
  { name = "Nathan McDougall", email = "nmcdougall@tonkintaylor.co.nz" },
]
license = { file = "LICENSE.txt" }
readme = "README.md"
requires-python = ">=3.12"
dynamic = ["version"]
dependencies = []

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "deptry>=0.23.0",
    "ipykernel>=6.30.0",
    "ipython>=9.4.0",
    "ipywidgets>=8.1.7",
    "matplotlib>=3.10.3",
    "nbstripout>=0.8.1",
    "perfplot>=0.10.2",
    "pip>=25.1.1",
    "pre-commit>=4.2.0",
    "pre-commit-update>=0.8.0",
    "ruff>=0.12.5",
    "setuptools-scm[toml]>=8.3.1",
    "tqdm>=4.67.1",
]
test = [
    "coverage[toml]>=7.10.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]
doc = []

[project.scripts]
# example = "ruru.scripts.example:myfunc"

[tool.setuptools_scm]
write_to = "src/ruru/_version.py"

[tool.setuptools]
package-dir = { "" = "src" }
packages = ["ruru"]
license-files = ["LICENSE.txt"]

[tool.distutils.bdist_wheel]
universal = true

[tool.uv]
default-groups = ["dev", "test", "doc"]
required-version = "==0.7.13"
link-mode = "symlink"

[tool.ruff]
src = ["src"]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
line-length = 88
extend-exclude = ["src/**/_version.py", "src/archive/**"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # ##############################
  # The following rules trade-off code quality for performance.
  # In some cases where your code is poorly-performing you might want to enable them again.
  # ##############################
  "PD101",   # Harms readability for a performance optimization.
  "PERF203", # Too many false positives.
  "PERF401", # This can hurt readability; the performance is not always worth it.
  # ##############################
  # The following rules are disabled for general reasons.
  # ##############################
  "ANN401",  # This is too strict for dunder methods.
  "B023",    # Prevents using df.loc[lambda _: ...]; too many false positives.
  "B024",    # This is controversial, ABC's don't always need methods.
  "C408",    # This is controversial, calls to `dict` can be more idiomatic than {}.
  "COM812",  # Incompatible with the ruff formatter.
  "D100",    # Too excessive for our purposes (Docstring in public module).
  "D105",    # This is controversial, we don't always need docstrings for magic methods.
  "D107",    # This is controversial, we don't always need docstrings for magic methods.
  "D202",    # This is controversial, it is useful to have a blank line after a docstring.
  "D203",    # This is controversial, no need to have a blank line before a docstring.
  "D213",    # This conflicts with D212 and violates PEP 257.
  "D406",    # This rule is for non-Google style docstrings.
  "D407",    # This rule is for non-Google style docstrings.
  "D408",    # This rule is for non-Google style docstrings.
  "D409",    # This rule is for non-Google style docstrings.
  "D415",    # Too excessive for our purposes (Docstring ending in punctuation).
  "G004",    # This is controversial, f-strings are too convenient to avoid.
  "TD003",   # Too excessive for our purposes (TODO Links).
  "ISC001",  # Incompatible with the ruff formatter.
  "PD901",   # We often call variables "df" in functions dealing with pandas DataFrames.
  "PIE804",  # This is controversial, some pandas APIs work better with dict approach.
  "PLR2004", # Too strict for exploratory work
  "PLW2901", # Too many false positives.
  "PT003",   # Explicit is better than implicit
  "PTH201",  # This is controversial, when dealing with relative paths "." is clearer.
  "RET504",  # This is controversial, named returns are often clearer.
  "RET505",  # This is controversial, returns within ``else`` are often clearer.
  "RET506",  # This is controversial, explicit branch structure is often clearer.
  "S105",    # Too many false positives.
  "S311",    # Too many false positives in a data science context.
  "S324",    # Too many false positives.
  "S603",    # Too many false positives.
  "SIM105",  # This harms refactorability, is slower, and increases learning curve.
  "SIM108",  # This is controversial, the ternary operator is not always clearer.
  "SIM118",  # This is controversial, sometimes .keys() explicitly is clearer.
  "TC001",   # Too many false positives.
  "TC002",   # Too many false positives.
  "TC003",   # Too many false positives.
  "TD",      # These rules don't align well with the way we use TODOs.
  "UP015",   # This is controversial, explicit is better than implicit.
  "UP040",   # This doesn't integrate well with pydantic.
]
allowed-confusables = ["–", "σ", "ℹ"]
flake8-tidy-imports.banned-api."pytz".msg = "'zoneinfo' should be preferred to 'pytz' when using Python 3.9 and later, see https://tonkintaylor-sonarqube.azurewebsites.net/coding_rules?open=python%3AS6890&rule_key=python%3AS6890"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "ANN",     # We don't need annotations in tests
  "D",       # We don't need docstrings in tests
  "PLR0913", # When we use fixtures, our test functions can have many arguments
  "S101",    # Using assert is fine in tests
  "FBT001",  # Fine for fixtures
  "INP",     # Tests don't need __init__.py files
]
"!tests/**/*py" = [
  "PT015",   # This is pytest specific and not applicable outside of the tests directory
  "T201",    # Print statements forbidden in tests but not elsewhere
]
"**/__init__.py" = [
  "D104", # Don't need a docstring in (usually empty) __init__.py files
  "F403", # We often use * imports in __init__.py files
  "F405", # We often use * imports in __init__.py files
]
"doc/source/conf.py" = [
  "BLE001", # We want to catch all errors blindly in Sphinx builds
  "INP001", # Not actually a namespace package, a special Sphinx file
]
# We aren't as strict about code quality in notebooks and scripts
"src/{scripts,notebooks}/**" = [
  "ANN",     # Annotations
  "ARG001",  # Unused function arguments
  "BLE001",  # OK to catch blind exceptions
  "D",       # Documentation
  "E501",    # Line length
  "INP001",  # __init__.py not applicable for standalone scripts anyway
  "S101",    # Asserts fine in scripts and notebooks
  "T201",    # Prints fine in scripts and notebooks
  "B018",    # "Useless" expressions are used for displaying cell outputs
  "FBT",     # Defensive programming techniques for function definitions are overkill
  "PLR0913", # OK to have functions with many arguments in scripts and notebooks
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.deptry]
extend_exclude = ["src/notebooks", "src/scripts", "src/archive"]
experimental_namespace_package = true

[tool.pytest.ini_options]
testpaths = [ "tests", "src" ]
norecursedirs = ["tests/assets", "src/notebooks", "src/scripts", "src/archive"]
addopts = [
  "--import-mode=importlib",
  "-ra",
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
]
console_output_style = "progress"
filterwarnings = [ "error" ]
xfail_strict = true
log_cli_level = "INFO"
doctest_optionflags = "NORMALIZE_WHITESPACE"

[tool.coverage.run]
source = ["src"]
omit = ["*/pytest-of-*/*", "*/_version.py", "src/archive/*"]

[tool.coverage.report]
ignore_errors = true
show_missing = true
exclude_lines = [
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  "AbstractMethodError",
  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if 0:",
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",
  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",
]
